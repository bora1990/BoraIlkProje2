// <auto-generated />
using System;
using BoraIlkProje2.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoraIlkProje2.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20230123163235_Roles1")]
    partial class Roles1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoraIlkProje2.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0eeb14be-b30f-4ea2-b365-aefb580177fd",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01972-649656",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Brayden"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "491725f4-dc44-4483-a12a-b61420c88e45",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01333-592332",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Landon"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "addf2ce0-03c1-4470-a501-3d024c959df3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01119-032070",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "David"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db95461f-48c0-46fa-8647-666c7994d03f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01747-782950",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Lucas"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a625b3e5-b53f-4103-b50e-64f47e2abe6a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01720-995117",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Julian"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4762c6c7-90f4-49bb-a4cf-2e5578ad6c3f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01319-687823",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Harper"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edecc5f9-2b8b-449c-9c16-8d68eaab31ea",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01942-812898",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Naomi"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58cba3bb-20eb-4d5a-b393-fba042df8c82",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01905-762636",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Julia"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "950a9214-61e7-4d64-bb14-6eb55ce200a2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01605-851511",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Hailey"
                        });
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ouantity")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2006, 5, 7, 18, 14, 35, 875, DateTimeKind.Unspecified).AddTicks(3540),
                            Ouantity = 82,
                            Price = 1229
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2021, 2, 20, 18, 33, 37, 48, DateTimeKind.Unspecified).AddTicks(1930),
                            Ouantity = 17,
                            Price = 1397
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2008, 11, 9, 11, 49, 44, 119, DateTimeKind.Unspecified).AddTicks(3420),
                            Ouantity = 65,
                            Price = 1413
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1989, 6, 18, 5, 54, 1, 629, DateTimeKind.Unspecified).AddTicks(7542),
                            Ouantity = 97,
                            Price = 1141
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2008, 4, 10, 19, 18, 35, 245, DateTimeKind.Unspecified).AddTicks(5304),
                            Ouantity = 79,
                            Price = 1652
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1994, 7, 10, 8, 51, 54, 7, DateTimeKind.Unspecified).AddTicks(3302),
                            Ouantity = 44,
                            Price = 1983
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2010, 2, 21, 9, 10, 43, 820, DateTimeKind.Unspecified).AddTicks(274),
                            Ouantity = 5,
                            Price = 1478
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2009, 4, 13, 0, 22, 8, 121, DateTimeKind.Unspecified).AddTicks(7942),
                            Ouantity = 16,
                            Price = 1637
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1984, 12, 18, 17, 41, 10, 749, DateTimeKind.Unspecified).AddTicks(5910),
                            Ouantity = 91,
                            Price = 1371
                        });
                });

            modelBuilder.Entity("BoraIlkProje2.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 9149m,
                            ProductName = "Abbott Incorporated"
                        },
                        new
                        {
                            Id = 2,
                            Price = 8896m,
                            ProductName = "Akhtar General Partnership"
                        },
                        new
                        {
                            Id = 3,
                            Price = 6779m,
                            ProductName = "Weaver Ccc"
                        },
                        new
                        {
                            Id = 4,
                            Price = 8975m,
                            ProductName = "Power CIO"
                        },
                        new
                        {
                            Id = 5,
                            Price = 6967m,
                            ProductName = "Harris Cyf"
                        },
                        new
                        {
                            Id = 6,
                            Price = 7652m,
                            ProductName = "Sinclair General Partnership"
                        },
                        new
                        {
                            Id = 7,
                            Price = 8958m,
                            ProductName = "Whittaker PLC"
                        },
                        new
                        {
                            Id = 8,
                            Price = 5964m,
                            ProductName = "Brown CIO"
                        },
                        new
                        {
                            Id = 9,
                            Price = 6617m,
                            ProductName = "Johnson Ltd"
                        });
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d62f0eae-69d0-4cb7-a869-8092a1b31b67",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "3b4554ae-e0ea-4bd6-b5ae-e4fcba44cda7",
                            Name = "Editor"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "c2241edc-1028-49a9-920c-57c1b56fcc3d",
                            Name = "Moderatör"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoraIlkProje2.Models.OrderDetail", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoraIlkProje2.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
