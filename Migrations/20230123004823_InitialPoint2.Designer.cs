// <auto-generated />
using System;
using BoraIlkProje2.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoraIlkProje2.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20230123004823_InitialPoint2")]
    partial class InitialPoint2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BoraIlkProje2.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b677bc4c-71f2-43c9-aa3e-784fdb62014e",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01369-731490",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Liam"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "252b95c4-340f-45c6-9a59-8d568f787baa",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01214-932879",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Victoria"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a7e600a-39c1-4da5-9f4e-0f95d0d86eb3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01989-652113",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Emily"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d483da6d-4fa6-4641-b5ef-f1805c892943",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01930-867167",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Nicholas"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c846fbb5-9660-4df5-b1f4-ce51777a75dc",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01660-022878",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Oliver"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79451f64-a9b2-429a-9e70-d662a4ae7030",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01591-419838",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Aaliyah"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f52be9c-7355-4973-9d8a-629246d801f5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01090-685915",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Mackenzie"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59546e2c-dd8d-4717-b38e-1ea6b04229d9",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01592-400386",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Hudson"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3560a368-f280-42e2-8ed0-1073cf7d3745",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "01582-002775",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Noah"
                        });
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ouantity")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2003, 4, 19, 1, 34, 44, 774, DateTimeKind.Unspecified).AddTicks(6734),
                            Ouantity = 73,
                            Price = 1398
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2020, 10, 18, 9, 15, 43, 640, DateTimeKind.Unspecified).AddTicks(2368),
                            Ouantity = 41,
                            Price = 1365
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1993, 6, 14, 2, 33, 42, 321, DateTimeKind.Unspecified).AddTicks(7297),
                            Ouantity = 7,
                            Price = 1546
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1996, 8, 29, 11, 16, 2, 366, DateTimeKind.Unspecified).AddTicks(7625),
                            Ouantity = 68,
                            Price = 1327
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1991, 1, 26, 19, 38, 54, 751, DateTimeKind.Unspecified).AddTicks(239),
                            Ouantity = 38,
                            Price = 1582
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1975, 11, 5, 0, 40, 13, 143, DateTimeKind.Unspecified).AddTicks(3875),
                            Ouantity = 85,
                            Price = 1547
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2019, 5, 18, 10, 12, 35, 262, DateTimeKind.Unspecified).AddTicks(8466),
                            Ouantity = 80,
                            Price = 1406
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 0,
                            CreatedDate = new DateTime(1994, 8, 10, 3, 8, 8, 630, DateTimeKind.Unspecified).AddTicks(1168),
                            Ouantity = 33,
                            Price = 1272
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 0,
                            CreatedDate = new DateTime(2016, 6, 24, 7, 6, 18, 475, DateTimeKind.Unspecified).AddTicks(1502),
                            Ouantity = 89,
                            Price = 1533
                        });
                });

            modelBuilder.Entity("BoraIlkProje2.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 7678m,
                            ProductName = "Dale PLC"
                        },
                        new
                        {
                            Id = 2,
                            Price = 9623m,
                            ProductName = "Mcgrath Cyf"
                        },
                        new
                        {
                            Id = 3,
                            Price = 5257m,
                            ProductName = "Williams Corporation"
                        },
                        new
                        {
                            Id = 4,
                            Price = 7330m,
                            ProductName = "Mohamed Incorporated"
                        },
                        new
                        {
                            Id = 5,
                            Price = 7470m,
                            ProductName = "Carroll and Sons"
                        },
                        new
                        {
                            Id = 6,
                            Price = 9765m,
                            ProductName = "Carroll Corporation"
                        },
                        new
                        {
                            Id = 7,
                            Price = 5271m,
                            ProductName = "Power PLC"
                        },
                        new
                        {
                            Id = 8,
                            Price = 9697m,
                            ProductName = "Abbott PLC"
                        },
                        new
                        {
                            Id = 9,
                            Price = 6917m,
                            ProductName = "Haines Ccc"
                        });
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BoraIlkProje2.Models.OrderDetail", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoraIlkProje2.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BoraIlkProje2.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoraIlkProje2.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
